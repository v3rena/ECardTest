//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ECard.BaseService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="base_15Binding", Namespace="http://soap.base.client.chipkarte.at")]
    public partial class BaseService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback authenticateDialogOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticateDialogEntOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePinOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePinWithPukOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeDialogOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDialogOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDialogEntOperationCompleted;
        
        private System.Threading.SendOrPostCallback doCardTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBerechtigungenOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCardDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCardReadersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExtendedCardDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFachgebieteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFachgebieteByOrdIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFreeDialogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGinaAndServiceavailabilityInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGinaSoftwareVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMinMsgPollingIntervallOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReaderStatusEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSVTsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStaatenOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVertraegeOperationCompleted;
        
        private System.Threading.SendOrPostCallback pollMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback releaseCardReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback setCardReaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDialogAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback uebersiedelnOrdinationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BaseService() {
            this.Url = global::ECard.Properties.Settings.Default.ECard_BaseService_BaseService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event authenticateDialogCompletedEventHandler authenticateDialogCompleted;
        
        /// <remarks/>
        public event authenticateDialogEntCompletedEventHandler authenticateDialogEntCompleted;
        
        /// <remarks/>
        public event changePinCompletedEventHandler changePinCompleted;
        
        /// <remarks/>
        public event changePinWithPukCompletedEventHandler changePinWithPukCompleted;
        
        /// <remarks/>
        public event checkStatusCompletedEventHandler checkStatusCompleted;
        
        /// <remarks/>
        public event closeDialogCompletedEventHandler closeDialogCompleted;
        
        /// <remarks/>
        public event createDialogCompletedEventHandler createDialogCompleted;
        
        /// <remarks/>
        public event createDialogEntCompletedEventHandler createDialogEntCompleted;
        
        /// <remarks/>
        public event doCardTestCompletedEventHandler doCardTestCompleted;
        
        /// <remarks/>
        public event getBerechtigungenCompletedEventHandler getBerechtigungenCompleted;
        
        /// <remarks/>
        public event getCardDataCompletedEventHandler getCardDataCompleted;
        
        /// <remarks/>
        public event getCardReadersCompletedEventHandler getCardReadersCompleted;
        
        /// <remarks/>
        public event getExtendedCardDataCompletedEventHandler getExtendedCardDataCompleted;
        
        /// <remarks/>
        public event getFachgebieteCompletedEventHandler getFachgebieteCompleted;
        
        /// <remarks/>
        public event getFachgebieteByOrdIdCompletedEventHandler getFachgebieteByOrdIdCompleted;
        
        /// <remarks/>
        public event getFreeDialogsCompletedEventHandler getFreeDialogsCompleted;
        
        /// <remarks/>
        public event getGinaAndServiceavailabilityInformationCompletedEventHandler getGinaAndServiceavailabilityInformationCompleted;
        
        /// <remarks/>
        public event getGinaSoftwareVersionCompletedEventHandler getGinaSoftwareVersionCompleted;
        
        /// <remarks/>
        public event getMessagesCompletedEventHandler getMessagesCompleted;
        
        /// <remarks/>
        public event getMinMsgPollingIntervallCompletedEventHandler getMinMsgPollingIntervallCompleted;
        
        /// <remarks/>
        public event getReaderStatusEventsCompletedEventHandler getReaderStatusEventsCompleted;
        
        /// <remarks/>
        public event getSVTsCompletedEventHandler getSVTsCompleted;
        
        /// <remarks/>
        public event getStaatenCompletedEventHandler getStaatenCompleted;
        
        /// <remarks/>
        public event getVertraegeCompletedEventHandler getVertraegeCompleted;
        
        /// <remarks/>
        public event pollMessagesCompletedEventHandler pollMessagesCompleted;
        
        /// <remarks/>
        public event releaseCardReaderCompletedEventHandler releaseCardReaderCompleted;
        
        /// <remarks/>
        public event setCardReaderCompletedEventHandler setCardReaderCompleted;
        
        /// <remarks/>
        public event setDialogAddressCompletedEventHandler setDialogAddressCompleted;
        
        /// <remarks/>
        public event uebersiedelnOrdinationCompletedEventHandler uebersiedelnOrdinationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public vertragspartnerV2 authenticateDialog(string dialogId, string cin, string pin, string cardReaderId) {
            object[] results = this.Invoke("authenticateDialog", new object[] {
                        dialogId,
                        cin,
                        pin,
                        cardReaderId});
            return ((vertragspartnerV2)(results[0]));
        }
        
        /// <remarks/>
        public void authenticateDialogAsync(string dialogId, string cin, string pin, string cardReaderId) {
            this.authenticateDialogAsync(dialogId, cin, pin, cardReaderId, null);
        }
        
        /// <remarks/>
        public void authenticateDialogAsync(string dialogId, string cin, string pin, string cardReaderId, object userState) {
            if ((this.authenticateDialogOperationCompleted == null)) {
                this.authenticateDialogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateDialogOperationCompleted);
            }
            this.InvokeAsync("authenticateDialog", new object[] {
                        dialogId,
                        cin,
                        pin,
                        cardReaderId}, this.authenticateDialogOperationCompleted, userState);
        }
        
        private void OnauthenticateDialogOperationCompleted(object arg) {
            if ((this.authenticateDialogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateDialogCompleted(this, new authenticateDialogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public vertragspartnerV2 authenticateDialogEnt(string dialogId) {
            object[] results = this.Invoke("authenticateDialogEnt", new object[] {
                        dialogId});
            return ((vertragspartnerV2)(results[0]));
        }
        
        /// <remarks/>
        public void authenticateDialogEntAsync(string dialogId) {
            this.authenticateDialogEntAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void authenticateDialogEntAsync(string dialogId, object userState) {
            if ((this.authenticateDialogEntOperationCompleted == null)) {
                this.authenticateDialogEntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticateDialogEntOperationCompleted);
            }
            this.InvokeAsync("authenticateDialogEnt", new object[] {
                        dialogId}, this.authenticateDialogEntOperationCompleted, userState);
        }
        
        private void OnauthenticateDialogEntOperationCompleted(object arg) {
            if ((this.authenticateDialogEntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticateDialogEntCompleted(this, new authenticateDialogEntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changePin(string cardReaderId, string cin, string oldPin, string newPin) {
            this.Invoke("changePin", new object[] {
                        cardReaderId,
                        cin,
                        oldPin,
                        newPin});
        }
        
        /// <remarks/>
        public void changePinAsync(string cardReaderId, string cin, string oldPin, string newPin) {
            this.changePinAsync(cardReaderId, cin, oldPin, newPin, null);
        }
        
        /// <remarks/>
        public void changePinAsync(string cardReaderId, string cin, string oldPin, string newPin, object userState) {
            if ((this.changePinOperationCompleted == null)) {
                this.changePinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePinOperationCompleted);
            }
            this.InvokeAsync("changePin", new object[] {
                        cardReaderId,
                        cin,
                        oldPin,
                        newPin}, this.changePinOperationCompleted, userState);
        }
        
        private void OnchangePinOperationCompleted(object arg) {
            if ((this.changePinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePinCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changePinWithPuk(string cardReaderId, string cin, string puk, string newPin) {
            this.Invoke("changePinWithPuk", new object[] {
                        cardReaderId,
                        cin,
                        puk,
                        newPin});
        }
        
        /// <remarks/>
        public void changePinWithPukAsync(string cardReaderId, string cin, string puk, string newPin) {
            this.changePinWithPukAsync(cardReaderId, cin, puk, newPin, null);
        }
        
        /// <remarks/>
        public void changePinWithPukAsync(string cardReaderId, string cin, string puk, string newPin, object userState) {
            if ((this.changePinWithPukOperationCompleted == null)) {
                this.changePinWithPukOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePinWithPukOperationCompleted);
            }
            this.InvokeAsync("changePinWithPuk", new object[] {
                        cardReaderId,
                        cin,
                        puk,
                        newPin}, this.changePinWithPukOperationCompleted, userState);
        }
        
        private void OnchangePinWithPukOperationCompleted(object arg) {
            if ((this.changePinWithPukCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePinWithPukCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public property[] checkStatus(string dialogId) {
            object[] results = this.Invoke("checkStatus", new object[] {
                        dialogId});
            return ((property[])(results[0]));
        }
        
        /// <remarks/>
        public void checkStatusAsync(string dialogId) {
            this.checkStatusAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void checkStatusAsync(string dialogId, object userState) {
            if ((this.checkStatusOperationCompleted == null)) {
                this.checkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckStatusOperationCompleted);
            }
            this.InvokeAsync("checkStatus", new object[] {
                        dialogId}, this.checkStatusOperationCompleted, userState);
        }
        
        private void OncheckStatusOperationCompleted(object arg) {
            if ((this.checkStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkStatusCompleted(this, new checkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeDialog(string dialogId) {
            this.Invoke("closeDialog", new object[] {
                        dialogId});
        }
        
        /// <remarks/>
        public void closeDialogAsync(string dialogId) {
            this.closeDialogAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void closeDialogAsync(string dialogId, object userState) {
            if ((this.closeDialogOperationCompleted == null)) {
                this.closeDialogOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseDialogOperationCompleted);
            }
            this.InvokeAsync("closeDialog", new object[] {
                        dialogId}, this.closeDialogOperationCompleted, userState);
        }
        
        private void OncloseDialogOperationCompleted(object arg) {
            if ((this.closeDialogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeDialogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string createDialog(string cardReaderId, produktInfo produktInfo, string extUID, bool pushMessageEnabled, [System.Xml.Serialization.XmlIgnoreAttribute()] bool pushMessageEnabledSpecified) {
            object[] results = this.Invoke("createDialog", new object[] {
                        cardReaderId,
                        produktInfo,
                        extUID,
                        pushMessageEnabled,
                        pushMessageEnabledSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createDialogAsync(string cardReaderId, produktInfo produktInfo, string extUID, bool pushMessageEnabled, bool pushMessageEnabledSpecified) {
            this.createDialogAsync(cardReaderId, produktInfo, extUID, pushMessageEnabled, pushMessageEnabledSpecified, null);
        }
        
        /// <remarks/>
        public void createDialogAsync(string cardReaderId, produktInfo produktInfo, string extUID, bool pushMessageEnabled, bool pushMessageEnabledSpecified, object userState) {
            if ((this.createDialogOperationCompleted == null)) {
                this.createDialogOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDialogOperationCompleted);
            }
            this.InvokeAsync("createDialog", new object[] {
                        cardReaderId,
                        produktInfo,
                        extUID,
                        pushMessageEnabled,
                        pushMessageEnabledSpecified}, this.createDialogOperationCompleted, userState);
        }
        
        private void OncreateDialogOperationCompleted(object arg) {
            if ((this.createDialogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDialogCompleted(this, new createDialogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string createDialogEnt(string cardReaderId, produktInfo produktInfo, string extUID, string vpNummer, bool pushMessageEnabled, [System.Xml.Serialization.XmlIgnoreAttribute()] bool pushMessageEnabledSpecified) {
            object[] results = this.Invoke("createDialogEnt", new object[] {
                        cardReaderId,
                        produktInfo,
                        extUID,
                        vpNummer,
                        pushMessageEnabled,
                        pushMessageEnabledSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createDialogEntAsync(string cardReaderId, produktInfo produktInfo, string extUID, string vpNummer, bool pushMessageEnabled, bool pushMessageEnabledSpecified) {
            this.createDialogEntAsync(cardReaderId, produktInfo, extUID, vpNummer, pushMessageEnabled, pushMessageEnabledSpecified, null);
        }
        
        /// <remarks/>
        public void createDialogEntAsync(string cardReaderId, produktInfo produktInfo, string extUID, string vpNummer, bool pushMessageEnabled, bool pushMessageEnabledSpecified, object userState) {
            if ((this.createDialogEntOperationCompleted == null)) {
                this.createDialogEntOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDialogEntOperationCompleted);
            }
            this.InvokeAsync("createDialogEnt", new object[] {
                        cardReaderId,
                        produktInfo,
                        extUID,
                        vpNummer,
                        pushMessageEnabled,
                        pushMessageEnabledSpecified}, this.createDialogEntOperationCompleted, userState);
        }
        
        private void OncreateDialogEntOperationCompleted(object arg) {
            if ((this.createDialogEntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDialogEntCompleted(this, new createDialogEntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void doCardTest(string cardReaderId, out int @return, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool returnSpecified) {
            object[] results = this.Invoke("doCardTest", new object[] {
                        cardReaderId});
            @return = ((int)(results[0]));
            returnSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void doCardTestAsync(string cardReaderId) {
            this.doCardTestAsync(cardReaderId, null);
        }
        
        /// <remarks/>
        public void doCardTestAsync(string cardReaderId, object userState) {
            if ((this.doCardTestOperationCompleted == null)) {
                this.doCardTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoCardTestOperationCompleted);
            }
            this.InvokeAsync("doCardTest", new object[] {
                        cardReaderId}, this.doCardTestOperationCompleted, userState);
        }
        
        private void OndoCardTestOperationCompleted(object arg) {
            if ((this.doCardTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doCardTestCompleted(this, new doCardTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] getBerechtigungen(string dialogId) {
            object[] results = this.Invoke("getBerechtigungen", new object[] {
                        dialogId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getBerechtigungenAsync(string dialogId) {
            this.getBerechtigungenAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void getBerechtigungenAsync(string dialogId, object userState) {
            if ((this.getBerechtigungenOperationCompleted == null)) {
                this.getBerechtigungenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBerechtigungenOperationCompleted);
            }
            this.InvokeAsync("getBerechtigungen", new object[] {
                        dialogId}, this.getBerechtigungenOperationCompleted, userState);
        }
        
        private void OngetBerechtigungenOperationCompleted(object arg) {
            if ((this.getBerechtigungenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBerechtigungenCompleted(this, new getBerechtigungenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public card getCardData(string cardReaderId) {
            object[] results = this.Invoke("getCardData", new object[] {
                        cardReaderId});
            return ((card)(results[0]));
        }
        
        /// <remarks/>
        public void getCardDataAsync(string cardReaderId) {
            this.getCardDataAsync(cardReaderId, null);
        }
        
        /// <remarks/>
        public void getCardDataAsync(string cardReaderId, object userState) {
            if ((this.getCardDataOperationCompleted == null)) {
                this.getCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCardDataOperationCompleted);
            }
            this.InvokeAsync("getCardData", new object[] {
                        cardReaderId}, this.getCardDataOperationCompleted, userState);
        }
        
        private void OngetCardDataOperationCompleted(object arg) {
            if ((this.getCardDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCardDataCompleted(this, new getCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public cardReader[] getCardReaders() {
            object[] results = this.Invoke("getCardReaders", new object[0]);
            return ((cardReader[])(results[0]));
        }
        
        /// <remarks/>
        public void getCardReadersAsync() {
            this.getCardReadersAsync(null);
        }
        
        /// <remarks/>
        public void getCardReadersAsync(object userState) {
            if ((this.getCardReadersOperationCompleted == null)) {
                this.getCardReadersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCardReadersOperationCompleted);
            }
            this.InvokeAsync("getCardReaders", new object[0], this.getCardReadersOperationCompleted, userState);
        }
        
        private void OngetCardReadersOperationCompleted(object arg) {
            if ((this.getCardReadersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCardReadersCompleted(this, new getCardReadersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public property[] getExtendedCardData(string cardReaderId, string CIN) {
            object[] results = this.Invoke("getExtendedCardData", new object[] {
                        cardReaderId,
                        CIN});
            return ((property[])(results[0]));
        }
        
        /// <remarks/>
        public void getExtendedCardDataAsync(string cardReaderId, string CIN) {
            this.getExtendedCardDataAsync(cardReaderId, CIN, null);
        }
        
        /// <remarks/>
        public void getExtendedCardDataAsync(string cardReaderId, string CIN, object userState) {
            if ((this.getExtendedCardDataOperationCompleted == null)) {
                this.getExtendedCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExtendedCardDataOperationCompleted);
            }
            this.InvokeAsync("getExtendedCardData", new object[] {
                        cardReaderId,
                        CIN}, this.getExtendedCardDataOperationCompleted, userState);
        }
        
        private void OngetExtendedCardDataOperationCompleted(object arg) {
            if ((this.getExtendedCardDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExtendedCardDataCompleted(this, new getExtendedCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public baseProperty[] getFachgebiete() {
            object[] results = this.Invoke("getFachgebiete", new object[0]);
            return ((baseProperty[])(results[0]));
        }
        
        /// <remarks/>
        public void getFachgebieteAsync() {
            this.getFachgebieteAsync(null);
        }
        
        /// <remarks/>
        public void getFachgebieteAsync(object userState) {
            if ((this.getFachgebieteOperationCompleted == null)) {
                this.getFachgebieteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFachgebieteOperationCompleted);
            }
            this.InvokeAsync("getFachgebiete", new object[0], this.getFachgebieteOperationCompleted, userState);
        }
        
        private void OngetFachgebieteOperationCompleted(object arg) {
            if ((this.getFachgebieteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFachgebieteCompleted(this, new getFachgebieteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public baseProperty[] getFachgebieteByOrdId(string dialogId, string ordId, string taetigkeitsBereichId) {
            object[] results = this.Invoke("getFachgebieteByOrdId", new object[] {
                        dialogId,
                        ordId,
                        taetigkeitsBereichId});
            return ((baseProperty[])(results[0]));
        }
        
        /// <remarks/>
        public void getFachgebieteByOrdIdAsync(string dialogId, string ordId, string taetigkeitsBereichId) {
            this.getFachgebieteByOrdIdAsync(dialogId, ordId, taetigkeitsBereichId, null);
        }
        
        /// <remarks/>
        public void getFachgebieteByOrdIdAsync(string dialogId, string ordId, string taetigkeitsBereichId, object userState) {
            if ((this.getFachgebieteByOrdIdOperationCompleted == null)) {
                this.getFachgebieteByOrdIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFachgebieteByOrdIdOperationCompleted);
            }
            this.InvokeAsync("getFachgebieteByOrdId", new object[] {
                        dialogId,
                        ordId,
                        taetigkeitsBereichId}, this.getFachgebieteByOrdIdOperationCompleted, userState);
        }
        
        private void OngetFachgebieteByOrdIdOperationCompleted(object arg) {
            if ((this.getFachgebieteByOrdIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFachgebieteByOrdIdCompleted(this, new getFachgebieteByOrdIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public dialogsInfo getFreeDialogs() {
            object[] results = this.Invoke("getFreeDialogs", new object[0]);
            return ((dialogsInfo)(results[0]));
        }
        
        /// <remarks/>
        public void getFreeDialogsAsync() {
            this.getFreeDialogsAsync(null);
        }
        
        /// <remarks/>
        public void getFreeDialogsAsync(object userState) {
            if ((this.getFreeDialogsOperationCompleted == null)) {
                this.getFreeDialogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFreeDialogsOperationCompleted);
            }
            this.InvokeAsync("getFreeDialogs", new object[0], this.getFreeDialogsOperationCompleted, userState);
        }
        
        private void OngetFreeDialogsOperationCompleted(object arg) {
            if ((this.getFreeDialogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFreeDialogsCompleted(this, new getFreeDialogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public statusInformationen getGinaAndServiceavailabilityInformation() {
            object[] results = this.Invoke("getGinaAndServiceavailabilityInformation", new object[0]);
            return ((statusInformationen)(results[0]));
        }
        
        /// <remarks/>
        public void getGinaAndServiceavailabilityInformationAsync() {
            this.getGinaAndServiceavailabilityInformationAsync(null);
        }
        
        /// <remarks/>
        public void getGinaAndServiceavailabilityInformationAsync(object userState) {
            if ((this.getGinaAndServiceavailabilityInformationOperationCompleted == null)) {
                this.getGinaAndServiceavailabilityInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGinaAndServiceavailabilityInformationOperationCompleted);
            }
            this.InvokeAsync("getGinaAndServiceavailabilityInformation", new object[0], this.getGinaAndServiceavailabilityInformationOperationCompleted, userState);
        }
        
        private void OngetGinaAndServiceavailabilityInformationOperationCompleted(object arg) {
            if ((this.getGinaAndServiceavailabilityInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGinaAndServiceavailabilityInformationCompleted(this, new getGinaAndServiceavailabilityInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public ginaVersion getGinaSoftwareVersion() {
            object[] results = this.Invoke("getGinaSoftwareVersion", new object[0]);
            return ((ginaVersion)(results[0]));
        }
        
        /// <remarks/>
        public void getGinaSoftwareVersionAsync() {
            this.getGinaSoftwareVersionAsync(null);
        }
        
        /// <remarks/>
        public void getGinaSoftwareVersionAsync(object userState) {
            if ((this.getGinaSoftwareVersionOperationCompleted == null)) {
                this.getGinaSoftwareVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGinaSoftwareVersionOperationCompleted);
            }
            this.InvokeAsync("getGinaSoftwareVersion", new object[0], this.getGinaSoftwareVersionOperationCompleted, userState);
        }
        
        private void OngetGinaSoftwareVersionOperationCompleted(object arg) {
            if ((this.getGinaSoftwareVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGinaSoftwareVersionCompleted(this, new getGinaSoftwareVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public message[] getMessages(string dialogId, bool newOnly, [System.Xml.Serialization.XmlIgnoreAttribute()] bool newOnlySpecified) {
            object[] results = this.Invoke("getMessages", new object[] {
                        dialogId,
                        newOnly,
                        newOnlySpecified});
            return ((message[])(results[0]));
        }
        
        /// <remarks/>
        public void getMessagesAsync(string dialogId, bool newOnly, bool newOnlySpecified) {
            this.getMessagesAsync(dialogId, newOnly, newOnlySpecified, null);
        }
        
        /// <remarks/>
        public void getMessagesAsync(string dialogId, bool newOnly, bool newOnlySpecified, object userState) {
            if ((this.getMessagesOperationCompleted == null)) {
                this.getMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMessagesOperationCompleted);
            }
            this.InvokeAsync("getMessages", new object[] {
                        dialogId,
                        newOnly,
                        newOnlySpecified}, this.getMessagesOperationCompleted, userState);
        }
        
        private void OngetMessagesOperationCompleted(object arg) {
            if ((this.getMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMessagesCompleted(this, new getMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getMinMsgPollingIntervall(string dialogId, out int @return, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool returnSpecified) {
            object[] results = this.Invoke("getMinMsgPollingIntervall", new object[] {
                        dialogId});
            @return = ((int)(results[0]));
            returnSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getMinMsgPollingIntervallAsync(string dialogId) {
            this.getMinMsgPollingIntervallAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void getMinMsgPollingIntervallAsync(string dialogId, object userState) {
            if ((this.getMinMsgPollingIntervallOperationCompleted == null)) {
                this.getMinMsgPollingIntervallOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMinMsgPollingIntervallOperationCompleted);
            }
            this.InvokeAsync("getMinMsgPollingIntervall", new object[] {
                        dialogId}, this.getMinMsgPollingIntervallOperationCompleted, userState);
        }
        
        private void OngetMinMsgPollingIntervallOperationCompleted(object arg) {
            if ((this.getMinMsgPollingIntervallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMinMsgPollingIntervallCompleted(this, new getMinMsgPollingIntervallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public readerStatusResult getReaderStatusEvents(string handle, [System.Xml.Serialization.XmlElementAttribute("cardReaderId", IsNullable=true)] string[] cardReaderId, int timeOut, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeOutSpecified) {
            object[] results = this.Invoke("getReaderStatusEvents", new object[] {
                        handle,
                        cardReaderId,
                        timeOut,
                        timeOutSpecified});
            return ((readerStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void getReaderStatusEventsAsync(string handle, string[] cardReaderId, int timeOut, bool timeOutSpecified) {
            this.getReaderStatusEventsAsync(handle, cardReaderId, timeOut, timeOutSpecified, null);
        }
        
        /// <remarks/>
        public void getReaderStatusEventsAsync(string handle, string[] cardReaderId, int timeOut, bool timeOutSpecified, object userState) {
            if ((this.getReaderStatusEventsOperationCompleted == null)) {
                this.getReaderStatusEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReaderStatusEventsOperationCompleted);
            }
            this.InvokeAsync("getReaderStatusEvents", new object[] {
                        handle,
                        cardReaderId,
                        timeOut,
                        timeOutSpecified}, this.getReaderStatusEventsOperationCompleted, userState);
        }
        
        private void OngetReaderStatusEventsOperationCompleted(object arg) {
            if ((this.getReaderStatusEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReaderStatusEventsCompleted(this, new getReaderStatusEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public svtProperty[] getSVTs() {
            object[] results = this.Invoke("getSVTs", new object[0]);
            return ((svtProperty[])(results[0]));
        }
        
        /// <remarks/>
        public void getSVTsAsync() {
            this.getSVTsAsync(null);
        }
        
        /// <remarks/>
        public void getSVTsAsync(object userState) {
            if ((this.getSVTsOperationCompleted == null)) {
                this.getSVTsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSVTsOperationCompleted);
            }
            this.InvokeAsync("getSVTs", new object[0], this.getSVTsOperationCompleted, userState);
        }
        
        private void OngetSVTsOperationCompleted(object arg) {
            if ((this.getSVTsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSVTsCompleted(this, new getSVTsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public baseProperty[] getStaaten() {
            object[] results = this.Invoke("getStaaten", new object[0]);
            return ((baseProperty[])(results[0]));
        }
        
        /// <remarks/>
        public void getStaatenAsync() {
            this.getStaatenAsync(null);
        }
        
        /// <remarks/>
        public void getStaatenAsync(object userState) {
            if ((this.getStaatenOperationCompleted == null)) {
                this.getStaatenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStaatenOperationCompleted);
            }
            this.InvokeAsync("getStaaten", new object[0], this.getStaatenOperationCompleted, userState);
        }
        
        private void OngetStaatenOperationCompleted(object arg) {
            if ((this.getStaatenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStaatenCompleted(this, new getStaatenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public vertragsDaten[] getVertraege(string dialogId) {
            object[] results = this.Invoke("getVertraege", new object[] {
                        dialogId});
            return ((vertragsDaten[])(results[0]));
        }
        
        /// <remarks/>
        public void getVertraegeAsync(string dialogId) {
            this.getVertraegeAsync(dialogId, null);
        }
        
        /// <remarks/>
        public void getVertraegeAsync(string dialogId, object userState) {
            if ((this.getVertraegeOperationCompleted == null)) {
                this.getVertraegeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVertraegeOperationCompleted);
            }
            this.InvokeAsync("getVertraege", new object[] {
                        dialogId}, this.getVertraegeOperationCompleted, userState);
        }
        
        private void OngetVertraegeOperationCompleted(object arg) {
            if ((this.getVertraegeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVertraegeCompleted(this, new getVertraegeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public messagePollResult pollMessages(string dialogId, string suchzeitpunkt) {
            object[] results = this.Invoke("pollMessages", new object[] {
                        dialogId,
                        suchzeitpunkt});
            return ((messagePollResult)(results[0]));
        }
        
        /// <remarks/>
        public void pollMessagesAsync(string dialogId, string suchzeitpunkt) {
            this.pollMessagesAsync(dialogId, suchzeitpunkt, null);
        }
        
        /// <remarks/>
        public void pollMessagesAsync(string dialogId, string suchzeitpunkt, object userState) {
            if ((this.pollMessagesOperationCompleted == null)) {
                this.pollMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpollMessagesOperationCompleted);
            }
            this.InvokeAsync("pollMessages", new object[] {
                        dialogId,
                        suchzeitpunkt}, this.pollMessagesOperationCompleted, userState);
        }
        
        private void OnpollMessagesOperationCompleted(object arg) {
            if ((this.pollMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pollMessagesCompleted(this, new pollMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void releaseCardReader(string cardReaderId) {
            this.Invoke("releaseCardReader", new object[] {
                        cardReaderId});
        }
        
        /// <remarks/>
        public void releaseCardReaderAsync(string cardReaderId) {
            this.releaseCardReaderAsync(cardReaderId, null);
        }
        
        /// <remarks/>
        public void releaseCardReaderAsync(string cardReaderId, object userState) {
            if ((this.releaseCardReaderOperationCompleted == null)) {
                this.releaseCardReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreleaseCardReaderOperationCompleted);
            }
            this.InvokeAsync("releaseCardReader", new object[] {
                        cardReaderId}, this.releaseCardReaderOperationCompleted, userState);
        }
        
        private void OnreleaseCardReaderOperationCompleted(object arg) {
            if ((this.releaseCardReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.releaseCardReaderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setCardReader(string dialogId, string cardReaderId) {
            this.Invoke("setCardReader", new object[] {
                        dialogId,
                        cardReaderId});
        }
        
        /// <remarks/>
        public void setCardReaderAsync(string dialogId, string cardReaderId) {
            this.setCardReaderAsync(dialogId, cardReaderId, null);
        }
        
        /// <remarks/>
        public void setCardReaderAsync(string dialogId, string cardReaderId, object userState) {
            if ((this.setCardReaderOperationCompleted == null)) {
                this.setCardReaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetCardReaderOperationCompleted);
            }
            this.InvokeAsync("setCardReader", new object[] {
                        dialogId,
                        cardReaderId}, this.setCardReaderOperationCompleted, userState);
        }
        
        private void OnsetCardReaderOperationCompleted(object arg) {
            if ((this.setCardReaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCardReaderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setDialogAddress(string dialogId, string ordinationId, string taetigkeitsBereichId, string elgaRolle, gdaMa gdaMa, string prozess) {
            this.Invoke("setDialogAddress", new object[] {
                        dialogId,
                        ordinationId,
                        taetigkeitsBereichId,
                        elgaRolle,
                        gdaMa,
                        prozess});
        }
        
        /// <remarks/>
        public void setDialogAddressAsync(string dialogId, string ordinationId, string taetigkeitsBereichId, string elgaRolle, gdaMa gdaMa, string prozess) {
            this.setDialogAddressAsync(dialogId, ordinationId, taetigkeitsBereichId, elgaRolle, gdaMa, prozess, null);
        }
        
        /// <remarks/>
        public void setDialogAddressAsync(string dialogId, string ordinationId, string taetigkeitsBereichId, string elgaRolle, gdaMa gdaMa, string prozess, object userState) {
            if ((this.setDialogAddressOperationCompleted == null)) {
                this.setDialogAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDialogAddressOperationCompleted);
            }
            this.InvokeAsync("setDialogAddress", new object[] {
                        dialogId,
                        ordinationId,
                        taetigkeitsBereichId,
                        elgaRolle,
                        gdaMa,
                        prozess}, this.setDialogAddressOperationCompleted, userState);
        }
        
        private void OnsetDialogAddressOperationCompleted(object arg) {
            if ((this.setDialogAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDialogAddressCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://soap.base.client.chipkarte.at", ResponseNamespace="http://soap.base.client.chipkarte.at", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void uebersiedelnOrdination(string dialogId, string ordinationId, bool forceUebersiedlung, [System.Xml.Serialization.XmlIgnoreAttribute()] bool forceUebersiedlungSpecified) {
            this.Invoke("uebersiedelnOrdination", new object[] {
                        dialogId,
                        ordinationId,
                        forceUebersiedlung,
                        forceUebersiedlungSpecified});
        }
        
        /// <remarks/>
        public void uebersiedelnOrdinationAsync(string dialogId, string ordinationId, bool forceUebersiedlung, bool forceUebersiedlungSpecified) {
            this.uebersiedelnOrdinationAsync(dialogId, ordinationId, forceUebersiedlung, forceUebersiedlungSpecified, null);
        }
        
        /// <remarks/>
        public void uebersiedelnOrdinationAsync(string dialogId, string ordinationId, bool forceUebersiedlung, bool forceUebersiedlungSpecified, object userState) {
            if ((this.uebersiedelnOrdinationOperationCompleted == null)) {
                this.uebersiedelnOrdinationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuebersiedelnOrdinationOperationCompleted);
            }
            this.InvokeAsync("uebersiedelnOrdination", new object[] {
                        dialogId,
                        ordinationId,
                        forceUebersiedlung,
                        forceUebersiedlungSpecified}, this.uebersiedelnOrdinationOperationCompleted, userState);
        }
        
        private void OnuebersiedelnOrdinationOperationCompleted(object arg) {
            if ((this.uebersiedelnOrdinationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uebersiedelnOrdinationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class vertragspartnerV2 {
        
        private string anredeCodeField;
        
        private authenticationStatus authenticationStatusField;
        
        private string druckNachnameField;
        
        private string druckVornameField;
        
        private string druckTitelHintenField;
        
        private string druckTitelVorneField;
        
        private string geburtsdatumField;
        
        private string nachnameField;
        
        private ordination[] ordinationField;
        
        private string titelHintenField;
        
        private string titelVorneField;
        
        private string vornameField;
        
        private string vpIdField;
        
        private string vpNummerField;
        
        /// <remarks/>
        public string anredeCode {
            get {
                return this.anredeCodeField;
            }
            set {
                this.anredeCodeField = value;
            }
        }
        
        /// <remarks/>
        public authenticationStatus authenticationStatus {
            get {
                return this.authenticationStatusField;
            }
            set {
                this.authenticationStatusField = value;
            }
        }
        
        /// <remarks/>
        public string druckNachname {
            get {
                return this.druckNachnameField;
            }
            set {
                this.druckNachnameField = value;
            }
        }
        
        /// <remarks/>
        public string druckVorname {
            get {
                return this.druckVornameField;
            }
            set {
                this.druckVornameField = value;
            }
        }
        
        /// <remarks/>
        public string druckTitelHinten {
            get {
                return this.druckTitelHintenField;
            }
            set {
                this.druckTitelHintenField = value;
            }
        }
        
        /// <remarks/>
        public string druckTitelVorne {
            get {
                return this.druckTitelVorneField;
            }
            set {
                this.druckTitelVorneField = value;
            }
        }
        
        /// <remarks/>
        public string geburtsdatum {
            get {
                return this.geburtsdatumField;
            }
            set {
                this.geburtsdatumField = value;
            }
        }
        
        /// <remarks/>
        public string nachname {
            get {
                return this.nachnameField;
            }
            set {
                this.nachnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ordination", IsNullable=true)]
        public ordination[] ordination {
            get {
                return this.ordinationField;
            }
            set {
                this.ordinationField = value;
            }
        }
        
        /// <remarks/>
        public string titelHinten {
            get {
                return this.titelHintenField;
            }
            set {
                this.titelHintenField = value;
            }
        }
        
        /// <remarks/>
        public string titelVorne {
            get {
                return this.titelVorneField;
            }
            set {
                this.titelVorneField = value;
            }
        }
        
        /// <remarks/>
        public string vorname {
            get {
                return this.vornameField;
            }
            set {
                this.vornameField = value;
            }
        }
        
        /// <remarks/>
        public string vpId {
            get {
                return this.vpIdField;
            }
            set {
                this.vpIdField = value;
            }
        }
        
        /// <remarks/>
        public string vpNummer {
            get {
                return this.vpNummerField;
            }
            set {
                this.vpNummerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class authenticationStatus {
        
        private int failedLoginAttemptsField;
        
        private bool failedLoginAttemptsFieldSpecified;
        
        private int failedPINAttemptsField;
        
        private bool failedPINAttemptsFieldSpecified;
        
        private string lastLoginDateField;
        
        /// <remarks/>
        public int failedLoginAttempts {
            get {
                return this.failedLoginAttemptsField;
            }
            set {
                this.failedLoginAttemptsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool failedLoginAttemptsSpecified {
            get {
                return this.failedLoginAttemptsFieldSpecified;
            }
            set {
                this.failedLoginAttemptsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int failedPINAttempts {
            get {
                return this.failedPINAttemptsField;
            }
            set {
                this.failedPINAttemptsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool failedPINAttemptsSpecified {
            get {
                return this.failedPINAttemptsFieldSpecified;
            }
            set {
                this.failedPINAttemptsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string lastLoginDate {
            get {
                return this.lastLoginDateField;
            }
            set {
                this.lastLoginDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class gdaMa {
        
        private string nachnameField;
        
        private string titelHintenField;
        
        private string titelVorneField;
        
        private string vornameField;
        
        private string zusatzinfoField;
        
        /// <remarks/>
        public string nachname {
            get {
                return this.nachnameField;
            }
            set {
                this.nachnameField = value;
            }
        }
        
        /// <remarks/>
        public string titelHinten {
            get {
                return this.titelHintenField;
            }
            set {
                this.titelHintenField = value;
            }
        }
        
        /// <remarks/>
        public string titelVorne {
            get {
                return this.titelVorneField;
            }
            set {
                this.titelVorneField = value;
            }
        }
        
        /// <remarks/>
        public string vorname {
            get {
                return this.vornameField;
            }
            set {
                this.vornameField = value;
            }
        }
        
        /// <remarks/>
        public string zusatzinfo {
            get {
                return this.zusatzinfoField;
            }
            set {
                this.zusatzinfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class messagePollResult {
        
        private message[] nachrichtenField;
        
        private bool nachrichtenVerfuegbarField;
        
        private bool nachrichtenVerfuegbarFieldSpecified;
        
        private string naechsterSuchzeitpunktField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("nachrichten", IsNullable=true)]
        public message[] nachrichten {
            get {
                return this.nachrichtenField;
            }
            set {
                this.nachrichtenField = value;
            }
        }
        
        /// <remarks/>
        public bool nachrichtenVerfuegbar {
            get {
                return this.nachrichtenVerfuegbarField;
            }
            set {
                this.nachrichtenVerfuegbarField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nachrichtenVerfuegbarSpecified {
            get {
                return this.nachrichtenVerfuegbarFieldSpecified;
            }
            set {
                this.nachrichtenVerfuegbarFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string naechsterSuchzeitpunkt {
            get {
                return this.naechsterSuchzeitpunktField;
            }
            set {
                this.naechsterSuchzeitpunktField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class message {
        
        private string appidField;
        
        private string categoryField;
        
        private string dataField;
        
        private string idField;
        
        private string textField;
        
        private string timestampField;
        
        /// <remarks/>
        public string appid {
            get {
                return this.appidField;
            }
            set {
                this.appidField = value;
            }
        }
        
        /// <remarks/>
        public string category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class vertragsDaten {
        
        private string bezBereichField;
        
        private string fachGebietsCodeField;
        
        private bool konsultationsrechtField;
        
        private bool konsultationsrechtFieldSpecified;
        
        private string leistungsSVTField;
        
        private string ordIdField;
        
        private bool rezepturrechtField;
        
        private bool rezepturrechtFieldSpecified;
        
        private string verrechnungsSVTField;
        
        private string taetigkeitsBereichIdField;
        
        private string vertragsTypField;
        
        /// <remarks/>
        public string bezBereich {
            get {
                return this.bezBereichField;
            }
            set {
                this.bezBereichField = value;
            }
        }
        
        /// <remarks/>
        public string fachGebietsCode {
            get {
                return this.fachGebietsCodeField;
            }
            set {
                this.fachGebietsCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool konsultationsrecht {
            get {
                return this.konsultationsrechtField;
            }
            set {
                this.konsultationsrechtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool konsultationsrechtSpecified {
            get {
                return this.konsultationsrechtFieldSpecified;
            }
            set {
                this.konsultationsrechtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string leistungsSVT {
            get {
                return this.leistungsSVTField;
            }
            set {
                this.leistungsSVTField = value;
            }
        }
        
        /// <remarks/>
        public string ordId {
            get {
                return this.ordIdField;
            }
            set {
                this.ordIdField = value;
            }
        }
        
        /// <remarks/>
        public bool rezepturrecht {
            get {
                return this.rezepturrechtField;
            }
            set {
                this.rezepturrechtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rezepturrechtSpecified {
            get {
                return this.rezepturrechtFieldSpecified;
            }
            set {
                this.rezepturrechtFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string verrechnungsSVT {
            get {
                return this.verrechnungsSVTField;
            }
            set {
                this.verrechnungsSVTField = value;
            }
        }
        
        /// <remarks/>
        public string taetigkeitsBereichId {
            get {
                return this.taetigkeitsBereichIdField;
            }
            set {
                this.taetigkeitsBereichIdField = value;
            }
        }
        
        /// <remarks/>
        public string vertragsTyp {
            get {
                return this.vertragsTypField;
            }
            set {
                this.vertragsTypField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class readerStatusEvent {
        
        private string cardReaderIdField;
        
        private string cardReaderStateField;
        
        private string cardTypeField;
        
        private string eventTypeField;
        
        private string timeStampField;
        
        /// <remarks/>
        public string cardReaderId {
            get {
                return this.cardReaderIdField;
            }
            set {
                this.cardReaderIdField = value;
            }
        }
        
        /// <remarks/>
        public string cardReaderState {
            get {
                return this.cardReaderStateField;
            }
            set {
                this.cardReaderStateField = value;
            }
        }
        
        /// <remarks/>
        public string cardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
            }
        }
        
        /// <remarks/>
        public string eventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        public string timeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class readerStatusResult {
        
        private string handleField;
        
        private readerStatusEvent[] readerStatusEventsField;
        
        /// <remarks/>
        public string handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("readerStatusEvents", IsNullable=true)]
        public readerStatusEvent[] readerStatusEvents {
            get {
                return this.readerStatusEventsField;
            }
            set {
                this.readerStatusEventsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class ginaVersion {
        
        private string softwareVersionField;
        
        private string typField;
        
        /// <remarks/>
        public string softwareVersion {
            get {
                return this.softwareVersionField;
            }
            set {
                this.softwareVersionField = value;
            }
        }
        
        /// <remarks/>
        public string typ {
            get {
                return this.typField;
            }
            set {
                this.typField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class serviceStatusInformation {
        
        private string hinweisAktionField;
        
        private string hinweisZusatzField;
        
        private bool modusField;
        
        private bool modusFieldSpecified;
        
        private string modusTextField;
        
        private string serviceNameField;
        
        /// <remarks/>
        public string hinweisAktion {
            get {
                return this.hinweisAktionField;
            }
            set {
                this.hinweisAktionField = value;
            }
        }
        
        /// <remarks/>
        public string hinweisZusatz {
            get {
                return this.hinweisZusatzField;
            }
            set {
                this.hinweisZusatzField = value;
            }
        }
        
        /// <remarks/>
        public bool modus {
            get {
                return this.modusField;
            }
            set {
                this.modusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modusSpecified {
            get {
                return this.modusFieldSpecified;
            }
            set {
                this.modusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string modusText {
            get {
                return this.modusTextField;
            }
            set {
                this.modusTextField = value;
            }
        }
        
        /// <remarks/>
        public string serviceName {
            get {
                return this.serviceNameField;
            }
            set {
                this.serviceNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class ginaInfo {
        
        private string dnsNameField;
        
        private string ipAdresseField;
        
        private string produktVersionField;
        
        /// <remarks/>
        public string dnsName {
            get {
                return this.dnsNameField;
            }
            set {
                this.dnsNameField = value;
            }
        }
        
        /// <remarks/>
        public string ipAdresse {
            get {
                return this.ipAdresseField;
            }
            set {
                this.ipAdresseField = value;
            }
        }
        
        /// <remarks/>
        public string produktVersion {
            get {
                return this.produktVersionField;
            }
            set {
                this.produktVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class statusInformationen {
        
        private ginaInfo ginaInfoField;
        
        private serviceStatusInformation[] serviceStatusInformationField;
        
        private string wartungsfensterBisField;
        
        private string wartungsfensterHinweisField;
        
        private bool wartungsfensterKennzeichenField;
        
        private bool wartungsfensterKennzeichenFieldSpecified;
        
        private string wartungsfensterTextField;
        
        private string wartungsfensterVonField;
        
        /// <remarks/>
        public ginaInfo ginaInfo {
            get {
                return this.ginaInfoField;
            }
            set {
                this.ginaInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("serviceStatusInformation", IsNullable=true)]
        public serviceStatusInformation[] serviceStatusInformation {
            get {
                return this.serviceStatusInformationField;
            }
            set {
                this.serviceStatusInformationField = value;
            }
        }
        
        /// <remarks/>
        public string wartungsfensterBis {
            get {
                return this.wartungsfensterBisField;
            }
            set {
                this.wartungsfensterBisField = value;
            }
        }
        
        /// <remarks/>
        public string wartungsfensterHinweis {
            get {
                return this.wartungsfensterHinweisField;
            }
            set {
                this.wartungsfensterHinweisField = value;
            }
        }
        
        /// <remarks/>
        public bool wartungsfensterKennzeichen {
            get {
                return this.wartungsfensterKennzeichenField;
            }
            set {
                this.wartungsfensterKennzeichenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wartungsfensterKennzeichenSpecified {
            get {
                return this.wartungsfensterKennzeichenFieldSpecified;
            }
            set {
                this.wartungsfensterKennzeichenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string wartungsfensterText {
            get {
                return this.wartungsfensterTextField;
            }
            set {
                this.wartungsfensterTextField = value;
            }
        }
        
        /// <remarks/>
        public string wartungsfensterVon {
            get {
                return this.wartungsfensterVonField;
            }
            set {
                this.wartungsfensterVonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class dialogsInfo {
        
        private int currentDialogsCountField;
        
        private bool currentDialogsCountFieldSpecified;
        
        private int maxDialogsCountField;
        
        private bool maxDialogsCountFieldSpecified;
        
        /// <remarks/>
        public int currentDialogsCount {
            get {
                return this.currentDialogsCountField;
            }
            set {
                this.currentDialogsCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentDialogsCountSpecified {
            get {
                return this.currentDialogsCountFieldSpecified;
            }
            set {
                this.currentDialogsCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int maxDialogsCount {
            get {
                return this.maxDialogsCountField;
            }
            set {
                this.maxDialogsCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxDialogsCountSpecified {
            get {
                return this.maxDialogsCountFieldSpecified;
            }
            set {
                this.maxDialogsCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(svtProperty))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class baseProperty {
        
        private string codeField;
        
        private bool nurAnzeigeField;
        
        private bool nurAnzeigeFieldSpecified;
        
        private string textField;
        
        /// <remarks/>
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public bool nurAnzeige {
            get {
                return this.nurAnzeigeField;
            }
            set {
                this.nurAnzeigeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nurAnzeigeSpecified {
            get {
                return this.nurAnzeigeFieldSpecified;
            }
            set {
                this.nurAnzeigeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class svtProperty : baseProperty {
        
        private bool aSVGField;
        
        private bool aSVGFieldSpecified;
        
        private string eKVKCodeField;
        
        private string eKVKNameField;
        
        private string kurzbezeichnungField;
        
        /// <remarks/>
        public bool ASVG {
            get {
                return this.aSVGField;
            }
            set {
                this.aSVGField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ASVGSpecified {
            get {
                return this.aSVGFieldSpecified;
            }
            set {
                this.aSVGFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string EKVKCode {
            get {
                return this.eKVKCodeField;
            }
            set {
                this.eKVKCodeField = value;
            }
        }
        
        /// <remarks/>
        public string EKVKName {
            get {
                return this.eKVKNameField;
            }
            set {
                this.eKVKNameField = value;
            }
        }
        
        /// <remarks/>
        public string kurzbezeichnung {
            get {
                return this.kurzbezeichnungField;
            }
            set {
                this.kurzbezeichnungField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class cardReader {
        
        private string idField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class card {
        
        private string cardTypeField;
        
        private string cinField;
        
        private string csnField;
        
        private string geburtsdatumField;
        
        private string geschlechtCodeField;
        
        private string nachnameField;
        
        private string nachnameLatin1Field;
        
        private string nummerField;
        
        private string titelField;
        
        private string titelHintenField;
        
        private string titelHintenLatin1Field;
        
        private string titelLatin1Field;
        
        private string vornameField;
        
        private string vornameLatin1Field;
        
        /// <remarks/>
        public string cardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
            }
        }
        
        /// <remarks/>
        public string cin {
            get {
                return this.cinField;
            }
            set {
                this.cinField = value;
            }
        }
        
        /// <remarks/>
        public string csn {
            get {
                return this.csnField;
            }
            set {
                this.csnField = value;
            }
        }
        
        /// <remarks/>
        public string geburtsdatum {
            get {
                return this.geburtsdatumField;
            }
            set {
                this.geburtsdatumField = value;
            }
        }
        
        /// <remarks/>
        public string geschlechtCode {
            get {
                return this.geschlechtCodeField;
            }
            set {
                this.geschlechtCodeField = value;
            }
        }
        
        /// <remarks/>
        public string nachname {
            get {
                return this.nachnameField;
            }
            set {
                this.nachnameField = value;
            }
        }
        
        /// <remarks/>
        public string nachnameLatin1 {
            get {
                return this.nachnameLatin1Field;
            }
            set {
                this.nachnameLatin1Field = value;
            }
        }
        
        /// <remarks/>
        public string nummer {
            get {
                return this.nummerField;
            }
            set {
                this.nummerField = value;
            }
        }
        
        /// <remarks/>
        public string titel {
            get {
                return this.titelField;
            }
            set {
                this.titelField = value;
            }
        }
        
        /// <remarks/>
        public string titelHinten {
            get {
                return this.titelHintenField;
            }
            set {
                this.titelHintenField = value;
            }
        }
        
        /// <remarks/>
        public string titelHintenLatin1 {
            get {
                return this.titelHintenLatin1Field;
            }
            set {
                this.titelHintenLatin1Field = value;
            }
        }
        
        /// <remarks/>
        public string titelLatin1 {
            get {
                return this.titelLatin1Field;
            }
            set {
                this.titelLatin1Field = value;
            }
        }
        
        /// <remarks/>
        public string vorname {
            get {
                return this.vornameField;
            }
            set {
                this.vornameField = value;
            }
        }
        
        /// <remarks/>
        public string vornameLatin1 {
            get {
                return this.vornameLatin1Field;
            }
            set {
                this.vornameLatin1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class produktInfo {
        
        private int produktIdField;
        
        private bool produktIdFieldSpecified;
        
        private string produktVersionField;
        
        /// <remarks/>
        public int produktId {
            get {
                return this.produktIdField;
            }
            set {
                this.produktIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool produktIdSpecified {
            get {
                return this.produktIdFieldSpecified;
            }
            set {
                this.produktIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string produktVersion {
            get {
                return this.produktVersionField;
            }
            set {
                this.produktVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class property {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class taetigkeitsBereich {
        
        private string idField;
        
        private string codeField;
        
        private string anzeigeTextField;
        
        /// <remarks/>
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string anzeigeText {
            get {
                return this.anzeigeTextField;
            }
            set {
                this.anzeigeTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.base.client.chipkarte.at")]
    public partial class ordination {
        
        private string bezirkField;
        
        private string bundeslandCodeField;
        
        private string landCodeField;
        
        private string ordinationIdField;
        
        private long ordinationNumberField;
        
        private bool ordinationNumberFieldSpecified;
        
        private string postleitzahlField;
        
        private string stadtField;
        
        private string strasseField;
        
        private bool uebersiedelnField;
        
        private bool uebersiedelnFieldSpecified;
        
        private string uebersiedelnDateField;
        
        private string vorgaengerOrdinationIdField;
        
        private taetigkeitsBereich[] taetigkeitsBereichField;
        
        /// <remarks/>
        public string bezirk {
            get {
                return this.bezirkField;
            }
            set {
                this.bezirkField = value;
            }
        }
        
        /// <remarks/>
        public string bundeslandCode {
            get {
                return this.bundeslandCodeField;
            }
            set {
                this.bundeslandCodeField = value;
            }
        }
        
        /// <remarks/>
        public string landCode {
            get {
                return this.landCodeField;
            }
            set {
                this.landCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ordinationId {
            get {
                return this.ordinationIdField;
            }
            set {
                this.ordinationIdField = value;
            }
        }
        
        /// <remarks/>
        public long ordinationNumber {
            get {
                return this.ordinationNumberField;
            }
            set {
                this.ordinationNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ordinationNumberSpecified {
            get {
                return this.ordinationNumberFieldSpecified;
            }
            set {
                this.ordinationNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string postleitzahl {
            get {
                return this.postleitzahlField;
            }
            set {
                this.postleitzahlField = value;
            }
        }
        
        /// <remarks/>
        public string stadt {
            get {
                return this.stadtField;
            }
            set {
                this.stadtField = value;
            }
        }
        
        /// <remarks/>
        public string strasse {
            get {
                return this.strasseField;
            }
            set {
                this.strasseField = value;
            }
        }
        
        /// <remarks/>
        public bool uebersiedeln {
            get {
                return this.uebersiedelnField;
            }
            set {
                this.uebersiedelnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uebersiedelnSpecified {
            get {
                return this.uebersiedelnFieldSpecified;
            }
            set {
                this.uebersiedelnFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string uebersiedelnDate {
            get {
                return this.uebersiedelnDateField;
            }
            set {
                this.uebersiedelnDateField = value;
            }
        }
        
        /// <remarks/>
        public string vorgaengerOrdinationId {
            get {
                return this.vorgaengerOrdinationIdField;
            }
            set {
                this.vorgaengerOrdinationIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("taetigkeitsBereich", IsNullable=true)]
        public taetigkeitsBereich[] taetigkeitsBereich {
            get {
                return this.taetigkeitsBereichField;
            }
            set {
                this.taetigkeitsBereichField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void authenticateDialogCompletedEventHandler(object sender, authenticateDialogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateDialogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateDialogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public vertragspartnerV2 Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((vertragspartnerV2)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void authenticateDialogEntCompletedEventHandler(object sender, authenticateDialogEntCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticateDialogEntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateDialogEntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public vertragspartnerV2 Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((vertragspartnerV2)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void changePinCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void changePinWithPukCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void checkStatusCompletedEventHandler(object sender, checkStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void closeDialogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void createDialogCompletedEventHandler(object sender, createDialogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDialogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDialogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void createDialogEntCompletedEventHandler(object sender, createDialogEntCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDialogEntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDialogEntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void doCardTestCompletedEventHandler(object sender, doCardTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doCardTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doCardTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int @return {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool returnSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getBerechtigungenCompletedEventHandler(object sender, getBerechtigungenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBerechtigungenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBerechtigungenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getCardDataCompletedEventHandler(object sender, getCardDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public card Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((card)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getCardReadersCompletedEventHandler(object sender, getCardReadersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCardReadersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCardReadersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public cardReader[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cardReader[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getExtendedCardDataCompletedEventHandler(object sender, getExtendedCardDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExtendedCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExtendedCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public property[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((property[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getFachgebieteCompletedEventHandler(object sender, getFachgebieteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFachgebieteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFachgebieteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public baseProperty[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((baseProperty[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getFachgebieteByOrdIdCompletedEventHandler(object sender, getFachgebieteByOrdIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFachgebieteByOrdIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFachgebieteByOrdIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public baseProperty[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((baseProperty[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getFreeDialogsCompletedEventHandler(object sender, getFreeDialogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFreeDialogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFreeDialogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public dialogsInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((dialogsInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getGinaAndServiceavailabilityInformationCompletedEventHandler(object sender, getGinaAndServiceavailabilityInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGinaAndServiceavailabilityInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGinaAndServiceavailabilityInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public statusInformationen Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((statusInformationen)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getGinaSoftwareVersionCompletedEventHandler(object sender, getGinaSoftwareVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGinaSoftwareVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGinaSoftwareVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ginaVersion Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ginaVersion)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getMessagesCompletedEventHandler(object sender, getMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public message[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((message[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getMinMsgPollingIntervallCompletedEventHandler(object sender, getMinMsgPollingIntervallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMinMsgPollingIntervallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMinMsgPollingIntervallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int @return {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool returnSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getReaderStatusEventsCompletedEventHandler(object sender, getReaderStatusEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReaderStatusEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReaderStatusEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public readerStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((readerStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getSVTsCompletedEventHandler(object sender, getSVTsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSVTsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSVTsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public svtProperty[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((svtProperty[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getStaatenCompletedEventHandler(object sender, getStaatenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStaatenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStaatenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public baseProperty[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((baseProperty[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getVertraegeCompletedEventHandler(object sender, getVertraegeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVertraegeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVertraegeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public vertragsDaten[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((vertragsDaten[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void pollMessagesCompletedEventHandler(object sender, pollMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pollMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal pollMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public messagePollResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((messagePollResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void releaseCardReaderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setCardReaderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setDialogAddressCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void uebersiedelnOrdinationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591